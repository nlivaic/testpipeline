trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  version: '1.0.0'

stages:
# build and run tests
- stage: Build
  jobs:
    - job: BuildAndTest
      steps:
      - script: echo 'Pipeline:\s version $(version)\nBuild.ArtifactStagingDirectory:\s $(Build.ArtifactStagingDirectory)\nCurrent Directory:\s $(pwd)\nContent:\s $(ls -al)'
        displayName: 'Basic Information'

      # - task: gitversion/setup@0
      #   displayName: Install GitVersion
      #   inputs:
      #     versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Determine Version
        inputs:
          additionalArguments: '/showConfig'
          useConfigFile: true   # default config file: GitVersion.yml
          configFilePath: './GitVersion.yml'

      - script: echo Current version is SemVer $(GitVersion.SemVer)
        displayName: Current Version

      # - script: |
      #     echo Major: $(GitVersion.Major)
      #     echo Minor: $(GitVersion.Minor)
      #     echo Patch: $(GitVersion.Patch)
      #     echo PreReleaseTag: $(GitVersion.PreReleaseTag)
      #     echo PreReleaseLabel: $(GitVersion.PreReleaseLabel)
      #     echo PreReleaseNumber: $(GitVersion.PreReleaseNumber)
      #     echo WeightedPreReleaseNumber: $(GitVersion.WeightedPreReleaseNumber)
      #     echo BuildMetaData: $(GitVersion.BuildMetaData)
      #     echo BuildMetaDataPadded: $(GitVersion.BuildMetaDataPadded)
      #     echo FullBuildMetaData: $(GitVersion.FullBuildMetaData)
      #     echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
      #     echo SemVer: $(GitVersion.SemVer)
      #     echo LegacySemVer: $(GitVersion.LegacySemVer)
      #     echo LegacySemVerPadded: $(GitVersion.LegacySemVerPadded)
      #     echo AssemblySemVer: $(GitVersion.AssemblySemVer)
      #     echo AssemblySemFileVer: $(GitVersion.AssemblySemFileVer)
      #     echo FullSemVer: $(GitVersion.FullSemVer)
      #     echo InformationalVersion: $(GitVersion.InformationalVersion)
      #     echo BranchName: $(GitVersion.BranchName)
      #     echo EscapedBranchName: $(GitVersion.EscapedBranchName)
      #     echo Sha: $(GitVersion.Sha)
      #     echo ShortSha: $(GitVersion.ShortSha)
      #     echo NuGetVersionV2: $(GitVersion.NuGetVersionV2)
      #     echo NuGetVersion: $(GitVersion.NuGetVersion)
      #     echo NuGetPreReleaseTagV2: $(GitVersion.NuGetPreReleaseTagV2)
      #     echo NuGetPreReleaseTag: $(GitVersion.NuGetPreReleaseTag)
      #     echo VersionSourceSha: $(GitVersion.VersionSourceSha)
      #     echo CommitsSinceVersionSource: $(GitVersion.CommitsSinceVersionSource)
      #     echo CommitsSinceVersionSourcePadded: $(GitVersion.CommitsSinceVersionSourcePadded)
      #     echo UncommittedChanges: $(GitVersion.UncommittedChanges)
      #     echo CommitDate: $(GitVersion.CommitDate)


      - task: Bash@3
        inputs:
          targetType: inlinescript echo "#vso[build.updatebuildnumber]$(semVer)"

      - script: dotnet build --configuration $(buildConfiguration)
        displayName: 'dotnet build $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: 'test'
          projects: '**/*.csproj'
          publishTestResults: true
          configuration: $(buildConfiguration)

# build must be approved before getting deployed to dev environment
# - stage: wait_for_approval
#   pool: server
#   condition: eq(variables['Build.Reason'], 'IndividualCI')
#   jobs:
#     - job: waitForApproval
#       displayName: 'wait for approval'
#       # timeoutInMinutes: 1440    # 3 days before the build is rejected
#       steps:
#       - task: ManualValidation@0
#         # timeoutInMinutes: 1440    # 3 days before the task is rejected.
#         inputs:
#           #notifyUsers: $(notify_user_for_approval_1)
#           instructions: 'Please validate the build before pushing to nuget.org'
#           onTimeout: reject