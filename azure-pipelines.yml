trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  version: '1.0.0'

stages:
# build and run tests
- stage: build
  jobs:
    - job: build
      steps:
      - script: echo 'Pipeline:\s version $(version)\nBuild.ArtifactStagingDirectory:\s $(Build.ArtifactStagingDirectory)\nCurrent Directory:\s $(pwd)\nContent:\s $(ls -al)'
        displayName: 'Basic Information'

      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Determine Version
        inputs:
          additionalArguments: '/showConfig'
          # useConfigFile: true   # default config file: GitVersion.yml

      - script: |
          echo 'Major:\s $(GitVersion.Major)'
          echo 'Minor:\s$(GitVersion.Minor)'
          echo 'Patch:\s$(GitVersion.Patch)'
          echo 'PreReleaseTag:\s$(GitVersion.PreReleaseTag)'
          echo 'PreReleaseLabel:\s$(GitVersion.PreReleaseLabel)'
          echo 'PreReleaseNumber:\s$(GitVersion.PreReleaseNumber)'
          echo 'WeightedPreReleaseNumber:\s$(GitVersion.WeightedPreReleaseNumber)'
          echo 'BuildMetaData:\s$(GitVersion.BuildMetaData)'
          echo 'BuildMetaDataPadded:\s$(GitVersion.BuildMetaDataPadded)'
          echo 'FullBuildMetaData:\s$(GitVersion.FullBuildMetaData)'
          echo 'MajorMinorPatch:\s$(GitVersion.MajorMinorPatch)'
          echo 'SemVer:\s$(GitVersion.SemVer)'
          echo 'LegacySemVer:\s$(GitVersion.LegacySemVer)'
          echo 'LegacySemVerPadded:\s$(GitVersion.LegacySemVerPadded)'
          echo 'AssemblySemVer:\s$(GitVersion.AssemblySemVer)'
          echo 'AssemblySemFileVer:\s$(GitVersion.AssemblySemFileVer)'
          echo 'FullSemVer:\s$(GitVersion.FullSemVer)'
          echo 'InformationalVersion:\s$(GitVersion.InformationalVersion)'
          echo 'BranchName:\s$(GitVersion.BranchName)'
          echo 'EscapedBranchName:\s$(GitVersion.EscapedBranchName)'
          echo 'Sha:\s$(GitVersion.Sha)'
          echo 'ShortSha:\s$(GitVersion.ShortSha)'
          echo 'NuGetVersionV2:\s$(GitVersion.NuGetVersionV2)'
          echo 'NuGetVersion:\s$(GitVersion.NuGetVersion)'
          echo 'NuGetPreReleaseTagV2:\s$(GitVersion.NuGetPreReleaseTagV2)'
          echo 'NuGetPreReleaseTag:\s$(GitVersion.NuGetPreReleaseTag)'
          echo 'VersionSourceSha:\s$(GitVersion.VersionSourceSha)'
          echo 'CommitsSinceVersionSource:\s$(GitVersion.CommitsSinceVersionSource)'
          echo 'CommitsSinceVersionSourcePadded:\s$(GitVersion.CommitsSinceVersionSourcePadded)'
          echo 'UncommittedChanges:\s$(GitVersion.UncommittedChanges)'
          echo 'CommitDate:\s$(GitVersion.CommitDate)'

      - script: dotnet build --configuration $(buildConfiguration)
        displayName: 'dotnet build $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: 'test'
          projects: '**/*.csproj'
          publishTestResults: true
          configuration: $(buildConfiguration)

# build must be approved before getting deployed to dev environment
# - stage: wait_for_approval
#   pool: server
#   condition: eq(variables['Build.Reason'], 'IndividualCI')
#   jobs:
#     - job: waitForApproval
#       displayName: 'wait for approval'
#       # timeoutInMinutes: 1440    # 3 days before the build is rejected
#       steps:
#       - task: ManualValidation@0
#         # timeoutInMinutes: 1440    # 3 days before the task is rejected.
#         inputs:
#           #notifyUsers: $(notify_user_for_approval_1)
#           instructions: 'Please validate the build before pushing to nuget.org'
#           onTimeout: reject